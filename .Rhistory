require(ggplot2); require(plyr); require(XML); require(ggmap); require(ifelse)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
setwd("C:/Github/StravaRecommender")
running.tcx.files <- list.files(file.path(getwd(), "data/running"), pattern = ".TCX", recursive = T)
GR <- readLines(file.path(getwd(), "data/running",running.tcx.files[1]))
track.point.start <- which(as.character(gregexpr("<Trackpoint>", GR) ) != "-1")
track.point.end <- which(as.character(gregexpr("</Trackpoint>", GR) ) != "-1")
tp <- list()
i <- 1
for (i in 1:length(track.point.start)) {
tp[[i]] <- GR[track.point.start[i]:track.point.end[i]]
print(c(floor(i/100)*100,length(track.point.start)))
}
event <- data.frame()
for (i in 1:length(tp)) {
event[i,1] <- if(length(tp[[i]][which(as.character(gregexpr("<Time>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<Time>",tp[[i]])) != -1)]))
event[i,2] <- if(length(tp[[i]][which(as.character(gregexpr("<LatitudeDegrees>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<LatitudeDegrees>",tp[[i]])) != -1)]))
event[i,3] <- if(length(tp[[i]][which(as.character(gregexpr("<LongitudeDegrees>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<LongitudeDegrees>",tp[[i]])) != -1)]))
event[i,4] <- if(length(tp[[i]][which(as.character(gregexpr("<AltitudeMeters>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<AltitudeMeters>",tp[[i]])) != -1)]))
event[i,5] <- if(length(tp[[i]][which(as.character(gregexpr("<DistanceMeters>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<DistanceMeters>",tp[[i]])) != -1)]))
print(i)
}
remove.html <- function(x) gsub("<.*?>", "", x)
strip.white <- function(x) gsub("\\s+$|^\\s+","",x)
for (i in 1:length(tp)) {
event[i,1] <- if(length(tp[[i]][which(as.character(gregexpr("<Time>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<Time>",tp[[i]])) != -1)]))
event[i,2] <- if(length(tp[[i]][which(as.character(gregexpr("<LatitudeDegrees>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<LatitudeDegrees>",tp[[i]])) != -1)]))
event[i,3] <- if(length(tp[[i]][which(as.character(gregexpr("<LongitudeDegrees>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<LongitudeDegrees>",tp[[i]])) != -1)]))
event[i,4] <- if(length(tp[[i]][which(as.character(gregexpr("<AltitudeMeters>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<AltitudeMeters>",tp[[i]])) != -1)]))
event[i,5] <- if(length(tp[[i]][which(as.character(gregexpr("<DistanceMeters>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<DistanceMeters>",tp[[i]])) != -1)]))
print(i)
}
colnames(event) <- c("Time", "Lat", "Lon", "Alt", "Dist")
event$Lat <- as.numeric(event$Lat)
event$Lon <- as.numeric(event$Lon)
event$Alt <- as.numeric(event$Alt)
event$Dist <- as.numeric(event$Dist)
event$Time <- strptime(event$Time, format = "%Y-%m-%dT%H:%M:%SZ", tz = "GMT")
a <- ggplot(event) + geom_line(aes(x = Time, y = Alt, col = Alt), lwd=2)
mean.lon <- mean(range(event$Lon[!is.na(event$Lon)]))
mean.lat <- mean(range(event$Lat[!is.na(event$Lat)]))
event.map <- get_googlemap(center = c(lon = mean.lon, lat = mean.lat), zoom = 10)
b <- ggmap(event.map) + geom_line(data = event, aes(x = Lon, y = Lat, col = Alt), lwd = 2)
multiplot(a,b)
head(event$Alt,20)
nrow(event)
for (i in 1:(nrow(event)-1) {
event$delta.alt[i] <- event$Alt[i+1]-event$Alt[i]
}
for (i in 1:(nrow(event)-1)) {
event$delta.alt[i] <- event$Alt[i+1]-event$Alt[i]
}
nrwo(event)
nrow(event)
event[31862:31864]
event[31862:31864,]
event$delta.alt[nrow(event)-1]
event$delta.alt[nrow(event)] <- event$delta.alt[nrow(event)-1]
ggmap(event.map) + geom_line(data = event, aes(x = Lon, y = Lat, col = delta.alt), lwd = 2)
ggplot(event) + geom_line(aes(x = Time, y = Alt, col = delta.alt), lwd=2)
hist(event$delta.alt)
head(event$delta.alt,20)
str(event)
head(event[,c(4,6)])
head(event[,c(4,6)],20)
c <- ggplot(event) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt), lwd=2)
multiplot(a,c)
c <- ggplot(event) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))
a <- ggplot(event) + geom_line(aes(x = Time, y = Alt, col = Alt))
multiplot(a,c)
c <- ggplot(event) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))
multiplot(a,c)
ggplot(event) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))
gplot(event) + geom_line(aes(x = Time, y = delta.alt))
ggplot(event) + geom_line(aes(x = Time, y = delta.alt))
nrow(event)
event[31800:31864,]
event[31861,]
event[31860,]
event[31862,]
event[31862,6]
event[31862,6] <- 0
c <- ggplot(event) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))
multiplot(a,c)
str(event)
hist(event$delta.alt)
ggplot(event) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))
head(event,20)
as.POSIXlt.numeric(event$Time)
as.numeric(event$Time)
head(as.numeric(event$Time))
#'Work in progress
#'
#' ek gebruik die file net om die structure van die data te verstaan :P
#'
#'
# installs and loads required packages====
packages <- c(
"ggplot2",
"plyr",
"XML"
"ggmap"
)
for (i in 1:length(packages)) {
if !(packages[i] %in% installed.packages()) install.packages(packages[i])
}
require(ggplot2); require(plyr); require(XML); require(ggmap);
#custom functions====
#strip <shit>
remove.html <- function(x) gsub("<.*?>", "", x)
#strip whitespace
strip.white <- function(x) gsub("\\s+$|^\\s+","",x)
#multiplot
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# eh====
setwd("C:/Github/StravaRecommender")
running.tcx.files <- list.files(file.path(getwd(), "data/running"), pattern = ".TCX", recursive = T)
GR <- readLines(file.path(getwd(), "data/running",running.tcx.files[1]))
track.point.start <- which(as.character(gregexpr("<Trackpoint>", GR) ) != "-1")
track.point.end <- which(as.character(gregexpr("</Trackpoint>", GR) ) != "-1")
tp <- list()
for (i in 1:length(track.point.start)) {
tp[[i]] <- GR[track.point.start[i]:track.point.end[i]]
print(c(floor(i/100)*100,length(track.point.start)))
}
event <- data.frame()
for (i in 1:length(tp)) {
event[i,1] <- if(length(tp[[i]][which(as.character(gregexpr("<Time>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<Time>",tp[[i]])) != -1)]))
event[i,2] <- if(length(tp[[i]][which(as.character(gregexpr("<LatitudeDegrees>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<LatitudeDegrees>",tp[[i]])) != -1)]))
event[i,3] <- if(length(tp[[i]][which(as.character(gregexpr("<LongitudeDegrees>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<LongitudeDegrees>",tp[[i]])) != -1)]))
event[i,4] <- if(length(tp[[i]][which(as.character(gregexpr("<AltitudeMeters>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<AltitudeMeters>",tp[[i]])) != -1)]))
event[i,5] <- if(length(tp[[i]][which(as.character(gregexpr("<DistanceMeters>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<DistanceMeters>",tp[[i]])) != -1)]))
print(c(floor(i/100)*100,length(tp)))
}
head(event)
event <- data.frame()
for (i in 1:length(tp)) {
event[i,1] <- if(length(tp[[i]][which(as.character(gregexpr("<Time>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<Time>",tp[[i]])) != -1)]))
event[i,2] <- if(length(tp[[i]][which(as.character(gregexpr("<LatitudeDegrees>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<LatitudeDegrees>",tp[[i]])) != -1)]))
event[i,3] <- if(length(tp[[i]][which(as.character(gregexpr("<LongitudeDegrees>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<LongitudeDegrees>",tp[[i]])) != -1)]))
event[i,4] <- if(length(tp[[i]][which(as.character(gregexpr("<AltitudeMeters>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<AltitudeMeters>",tp[[i]])) != -1)]))
event[i,5] <- if(length(tp[[i]][which(as.character(gregexpr("<DistanceMeters>",tp[[i]])) != -1)]) == 0) NA else
remove.html(strip.white(tp[[i]][which(as.character(gregexpr("<DistanceMeters>",tp[[i]])) != -1)]))
print(c(floor(i/100)*100,length(tp)))
}
colnames(event) <- c("Time", "Lat", "Lon", "Alt", "Dist")
event$Lat <- as.numeric(event$Lat)
event$Lon <- as.numeric(event$Lon)
event$Alt <- as.numeric(event$Alt)
event$Dist <- as.numeric(event$Dist)
event$Time <- strptime(event$Time, format = "%Y-%m-%dT%H:%M:%SZ", tz = "GMT")
head(event)
head(GR)
tp[[2]]
head(event)
head(as.POSIXlt.numeric(event$Time)
)
head(as.POSIXlt.numeric(event$Time))
head(as.numeric(event$Time))
1370143806 %% 10
test <- head(event$Time,20)
test
test <- head(as.numeric(event$Time),20)
test
test %%5
test %% 3
freq <- 5
event$Time[1] %% freq
event[which(as.numeric(event$Time) %% freq) == as.numeric(event$Time[1]) %% freq,]
event[which(as.numeric(event$Time) %% freq == as.numeric(event$Time[1]) %% freq),]
event.ss <- event[which(as.numeric(event$Time) %% freq == as.numeric(event$Time[1]) %% freq),]
a <- ggplot(event2) + geom_line(aes(x = Time, y = Alt, col = Alt))
a
ggplot(event.ss) + geom_line(aes(x = Time, y = Alt, col = Alt))
ggplot(event.ss) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))
nrow(event.ss)
head(event.ss)
for (i in 1:(nrow(event.ss)-1)) {
event.ss$delta.alt[i] <- event.ss$Alt[i+1]-event.ss$Alt[i]
}
ggplot(event.ss) + geom_line(aes(x = Time, y = delta.alt, col = Alt))
i <- 1
event.ss$Alt[i+1]-event.ss$Alt[i]
i <- 2
event.ss$Alt[i+1]-event.ss$Alt[i]
head(event.ss)
head(event.ss,20)
head(event.ss,30)
ggplot(event.ss) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))
plot(event.ss$delta.alt, type = "l")
quantile(event.ss$delta.alt,.999)
event.ss$delta.alt
quantile(event.ss$delta.alt,.999)
quantile(event.ss$delta.alt,.999, no.rm = T)
quantile(event.ss$delta.alt,.999, na.rm = T)
quantile(event.ss$delta.alt,.9999, na.rm = T)
1-.9995
?quantile
quantile(event.ss$delta.alt,probs = seq(0.9995, 1 - 0.9995), na.rm = T)
quantile(event.ss$delta.alt, probs = seq(0.9995, 1 - 0.9995), na.rm = T)
is.na(event.ss$delta.alt)
which(is.na(event.ss$delta.alt))
which(is.na(event.ss$delta.alt) ||
event.ss$delta.alt > quantile(event.ss$delta.alt,.9995, na.rm = T) ||
event.ss$delta.alt < quantile(event.ss$delta.alt,1-.9995, na.rm = T))
which(is.na(event.ss$delta.alt) |
event.ss$delta.alt > quantile(event.ss$delta.alt,.9995, na.rm = T) |
event.ss$delta.alt < quantile(event.ss$delta.alt,1-.9995, na.rm = T))
which(event.ss$delta.alt > quantile(event.ss$delta.alt,.9995, na.rm = T) |
event.ss$delta.alt < quantile(event.ss$delta.alt,1-.9995, na.rm = T))
quantile(event.ss$delta.alt,.9995, na.rm = T)
abline(quantile(event.ss$delta.alt,.9995, na.rm = T, col = "red")
)
abline( h = quantile(event.ss$delta.alt,.9995, na.rm = T, col = "red"))
abline( h = quantile(event.ss$delta.alt,1-.9995, na.rm = T, colour = "red"))
?abline
abline( h = quantile(event.ss$delta.alt,1-.9999, na.rm = T, colour = "red"))
abline( h = quantile(event.ss$delta.alt,.9999, na.rm = T, col = "red"))
which(event.ss$delta.alt > quantile(event.ss$delta.alt,.9999, na.rm = T)[1] |
event.ss$delta.alt < quantile(event.ss$delta.alt,1-.9999, na.rm = T)[1])
which(event.ss$delta.alt > quantile(event.ss$delta.alt,.9995, na.rm = T)[1] |
event.ss$delta.alt < quantile(event.ss$delta.alt,1-.9995, na.rm = T)[1])
event.ss$delta.alt < quantile(event.ss$delta.alt,1-.9995, na.rm = T)[1]
quantile(event.ss$delta.alt,1-.9995, na.rm = T)
which(is.na(event.ss$delta.alt))
event.ss[which(is.na(event.ss$delta.alt)),]
event.ss[which(is.na(event.ss$delta.alt)),] <- event.ss[-which(is.na(event.ss$delta.alt)),]
event.ss[which(is.na(event.ss$delta.alt)),]
event.ss
which(is.na(event.ss$delta.alt))
warnings()
event.ss[-which(is.na(event.ss$delta.alt)),]
freq <- 5 # ie every 5th second
event.ss <- event[which(as.numeric(event$Time) %% freq == as.numeric(event$Time[1]) %% freq),]
for (i in 1:(nrow(event.ss)-1)) {
event.ss$delta.alt[i] <- event.ss$Alt[i+1]-event.ss$Alt[i]
}
for (i in 1:(nrow(event)-1)) {
event$delta.alt[i] <- event$Alt[i+1]-event$Alt[i]
}
event$delta.alt[nrow(event)] <- event$delta.alt[nrow(event)-1]
freq <- 5 # ie every 5th second
event.ss <- event[which(as.numeric(event$Time) %% freq == as.numeric(event$Time[1]) %% freq),]
for (i in 1:(nrow(event.ss)-1)) {
event.ss$delta.alt[i] <- event.ss$Alt[i+1]-event.ss$Alt[i]
}
event.ss$delta.alt[nrow(event.ss)] <- event.ss$delta.alt[nrow(event.ss)-1]
event.ss[which(is.na(event.ss$delta.alt)),]
event.ss[-which(is.na(event.ss$delta.alt)),]
event.ss <- event.ss[-which(is.na(event.ss$delta.alt)),]
event.ss[which(is.na(event.ss$delta.alt)),]
ggplot(event.ss) + geom_line(aes(x = Time, y = Alt, col = Alt))
ggplot(event.ss) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))

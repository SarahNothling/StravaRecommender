{
    "contents" : "#'Work in progress\n#'\n#' ek gebruik die file net om die structure van die data te verstaan :P\n#'\n#'\n\n\n# installs and loads required packages====\npackages <- c(\n  \"ggplot2\",\n  \"plyr\",\n  \"XML\",\n  \"ggmap\"\n  )\nfor (i in 1:length(packages)) {\n  if !(packages[i] %in% installed.packages()) install.packages(packages[i]) \n}\nrequire(ggplot2); require(plyr); require(XML); require(ggmap);\n\n#custom functions====\n#strip <shit>\nremove.html <- function(x) gsub(\"<.*?>\", \"\", x)\n#strip whitespace\nstrip.white <- function(x) gsub(\"\\\\s+$|^\\\\s+\",\"\",x)\n#multiplot\nmultiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n  library(grid)\n  \n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n  \n  numPlots = length(plots)\n  \n  # If layout is NULL, then use 'cols' to determine layout\n  if (is.null(layout)) {\n    # Make the panel\n    # ncol: Number of columns of plots\n    # nrow: Number of rows needed, calculated from # of cols\n    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                     ncol = cols, nrow = ceiling(numPlots/cols))\n  }\n  \n  if (numPlots==1) {\n    print(plots[[1]])\n    \n  } else {\n    # Set up the page\n    grid.newpage()\n    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n    \n    # Make each plot, in the correct location\n    for (i in 1:numPlots) {\n      # Get the i,j matrix positions of the regions that contain this subplot\n      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n      \n      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                      layout.pos.col = matchidx$col))\n    }\n  }\n}\n\n\n\n# eh====\nsetwd(\"C:/Github/StravaRecommender\")\nrunning.tcx.files <- list.files(file.path(getwd(), \"data/running\"), pattern = \".TCX\", recursive = T)\n\nGR <- readLines(file.path(getwd(), \"data/running\",running.tcx.files[1]))\n\ntrack.point.start <- which(as.character(gregexpr(\"<Trackpoint>\", GR) ) != \"-1\")\ntrack.point.end <- which(as.character(gregexpr(\"</Trackpoint>\", GR) ) != \"-1\")\ntp <- list()\n\nfor (i in 1:length(track.point.start)) {\n  tp[[i]] <- GR[track.point.start[i]:track.point.end[i]] \n  print(c(floor(i/100)*100,length(track.point.start)))\n}\nevent <- data.frame()\nfor (i in 1:length(tp)) {\nevent[i,1] <- if(length(tp[[i]][which(as.character(gregexpr(\"<Time>\",tp[[i]])) != -1)]) == 0) NA else \n  remove.html(strip.white(tp[[i]][which(as.character(gregexpr(\"<Time>\",tp[[i]])) != -1)]))\nevent[i,2] <- if(length(tp[[i]][which(as.character(gregexpr(\"<LatitudeDegrees>\",tp[[i]])) != -1)]) == 0) NA else \n  remove.html(strip.white(tp[[i]][which(as.character(gregexpr(\"<LatitudeDegrees>\",tp[[i]])) != -1)]))\nevent[i,3] <- if(length(tp[[i]][which(as.character(gregexpr(\"<LongitudeDegrees>\",tp[[i]])) != -1)]) == 0) NA else \n  remove.html(strip.white(tp[[i]][which(as.character(gregexpr(\"<LongitudeDegrees>\",tp[[i]])) != -1)]))\nevent[i,4] <- if(length(tp[[i]][which(as.character(gregexpr(\"<AltitudeMeters>\",tp[[i]])) != -1)]) == 0) NA else \n  remove.html(strip.white(tp[[i]][which(as.character(gregexpr(\"<AltitudeMeters>\",tp[[i]])) != -1)]))\nevent[i,5] <- if(length(tp[[i]][which(as.character(gregexpr(\"<DistanceMeters>\",tp[[i]])) != -1)]) == 0) NA else \n  remove.html(strip.white(tp[[i]][which(as.character(gregexpr(\"<DistanceMeters>\",tp[[i]])) != -1)]))\nprint(c(floor(i/100)*100,length(tp)))\n}\n\ncolnames(event) <- c(\"Time\", \"Lat\", \"Lon\", \"Alt\", \"Dist\")\n\nevent$Lat <- as.numeric(event$Lat)\nevent$Lon <- as.numeric(event$Lon)\nevent$Alt <- as.numeric(event$Alt)\nevent$Dist <- as.numeric(event$Dist)\nevent$Time <- strptime(event$Time, format = \"%Y-%m-%dT%H:%M:%SZ\", tz = \"GMT\")\n\n# subsetting the data\n\nfreq <- 5 # ie every 5th second\nevent.ss <- event[which(as.numeric(event$Time) %% freq == as.numeric(event$Time[1]) %% freq),]\nfor (i in 1:(nrow(event.ss)-1)) {\n  event.ss$delta.alt[i] <- event.ss$Alt[i+1]-event.ss$Alt[i]\n  \n}\n\nevent.ss$delta.alt[nrow(event.ss)] <- event.ss$delta.alt[nrow(event.ss)-1]\n\n# removes NAs\nevent.ss <- event.ss[-which(is.na(event.ss$delta.alt)),] \n\n\n\n\n# plotting====\n\na <- ggplot(event.ss) + geom_line(aes(x = Time, y = Alt, col = Alt))\n\nmean.lon <- mean(range(event$Lon[!is.na(event$Lon)]))\nmean.lat <- mean(range(event$Lat[!is.na(event$Lat)]))\n\nevent.map <- get_googlemap(center = c(lon = mean.lon, lat = mean.lat), zoom = 10)\nb <- ggmap(event.map) + geom_line(data = event, aes(x = Lon, y = Lat, col = delta.alt), lwd = 2)\n\nc <- ggplot(event.ss) + geom_line(aes(x = Time, y = delta.alt, col = delta.alt))\n\nmultiplot(a,c)\n\n\n\n",
    "created" : 1433862366398.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "575043020",
    "id" : "F4E98FA1",
    "lastKnownWriteTime" : 1433971154,
    "path" : "C:/Github/StravaRecommender/Importdata.R",
    "project_path" : "Importdata.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}